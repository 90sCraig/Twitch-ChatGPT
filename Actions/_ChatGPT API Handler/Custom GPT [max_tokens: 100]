using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

public class CPHInline
{
    public bool Execute()
    {
        string apiKey = args["chatGPT3APIkey"].ToString();
        string model = args["model"].ToString();
        string content = args["behavior"].ToString();
        string temperature = args["temperature"].ToString();

        // create a ChatGPTAPI instance with your API key
        ChatGPTAPI chatGPT = new ChatGPTAPI(apiKey);

        // get the message input from the arguments
        string messageInputRaw = args["inputGPT"].ToString();
        string messageInput = messageInputRaw.Replace("\"", "");
        string user = args["inputUser"].ToString();

        // generate a response with the ChatGPTAPI
        string response = chatGPT.GenerateResponse(messageInput, model, content, temperature);

        // send the response to the chat
        Root root = JsonConvert.DeserializeObject<Root>(response);

        string myString = root.choices[0].message.content;
        CPH.LogInfo("GPT myString " + myString);

		string cleanedString = Regex.Replace(myString, @"[\r\n]+", " ");
		string unescapedString = Regex.Unescape(cleanedString);
		string finalGPT = unescapedString.Trim('\"');

        //CPH.SendMessage(finalGPT);
        CPH.SetGlobalVar("GPT", finalGPT, false);

        CPH.LogInfo("GPT " + finalGPT);
        CPH.LogDebug(response);

        return true;
    }
}

class ChatGPTAPI
{
    private string _apiKey;
    private string _endpoint = "https://api.openai.com/v1/chat/completions";

    public ChatGPTAPI(string apiKey)
    {
        _apiKey = apiKey;
    }

    public string GenerateResponse(string prompt, string model, string behavior, string temperature)
    {
        // Create a request to the ChatGPT API
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(_endpoint);
        request.Headers.Add("Authorization", "Bearer " + _apiKey);
        request.ContentType = "application/json";
        request.Method = "POST";

        // Build the request body
        string requestBody = "{\"model\": \"" + model + "\",\"max_tokens\": 100, \"temperature\": " + temperature + ", \"messages\": [{\"role\": \"system\", \"content\": \" " + behavior + " \"}, {\"role\": \"user\", \"content\": \"" + prompt + "\"}]}";
        byte[] bytes = Encoding.UTF8.GetBytes(requestBody);
        request.ContentLength = bytes.Length;

        using (Stream requestStream = request.GetRequestStream())
        {
            requestStream.Write(bytes, 0, bytes.Length);
        }

        // Get the response from the ChatGPT API
        HttpWebResponse response = (HttpWebResponse)request.GetResponse();
        string responseBody;

        using (Stream responseStream = response.GetResponseStream())
        {
            StreamReader reader = new StreamReader(responseStream, Encoding.UTF8);
            responseBody = reader.ReadToEnd();
        }

        return responseBody;
    }
}

public class Message
{
    public string role { get; set; }
    public string content { get; set; }
}

public class Choice
{
    public Message message { get; set; }
    public int index { get; set; }
    public object logprobs { get; set; }
    public string finish_reason { get; set; }
}

public class Root
{
    public string id { get; set; }
    public string @object { get; set; }
    public int created { get; set; }
    public string model { get; set; }
    public List<Choice> choices { get; set; }
    public Usage usage { get; set; }
}

public class Usage
{
    public int prompt_tokens { get; set; }
    public int completion_tokens { get; set; }
    public int total_tokens { get; set; }
}
